names_pattern = "(.*)_(.*)",      # split on underscore
values_to = "score"
) %>%
# 2) Pivot wider so that 'game' and 'cards' each get their own column
pivot_wider(
names_from = measure,            # measure is "game" or "cards"
values_from = score
) %>%
# 3) Convert the time labels from "before"/"after" to capitalized or simpler factor labels
mutate(
time = case_when(
time == "before" ~ "Before",
time == "after"  ~ "After",
TRUE ~ time
)
) %>%
# 4) (Optional) rename columns for clarity
rename(
game_score  = game,
cards_score = cards
)
#### Preamble ####
# Purpose: Clean the cyberattack dataset for analysis on cyber breaches
# Author: Shivank Goel
# Date: 22 March 2024
# Contact: shivankg.goel@mail.utoronto.ca
# License: MIT
#### Workspace setup ####
library(tidyverse)
library(tidyr)
library(janitor)
library(lubridate)
library(readxl)
library(arrow)
library(dplyr)
library(stringr)
#### Clean data ####
# Reading dataset
df  <- read.csv("data/raw_data/STA305 Dataset.csv")
df_long <- df %>%
# 1) Pivot everything into a single 'score' column
pivot_longer(
cols = c(game_before, game_after, cards_before, cards_after),
names_to = c("measure", "time"),  # measure = "game"/"cards"; time = "before"/"after"
names_pattern = "(.*)_(.*)",      # split on underscore
values_to = "score"
) %>%
# 2) Pivot wider so that 'game' and 'cards' each get their own column
pivot_wider(
names_from = measure,            # measure is "game" or "cards"
values_from = score
) %>%
# 3) Convert the time labels from "before"/"after" to capitalized or simpler factor labels
mutate(
time = case_when(
time == "before" ~ "Before",
time == "after"  ~ "After",
TRUE ~ time
)
) %>%
# 4) (Optional) rename columns for clarity
rename(
game_score  = game,
cards_score = cards
)
#### Preamble ####
# Purpose: Clean the cyberattack dataset for analysis on cyber breaches
# Author: Shivank Goel
# Date: 22 March 2024
# Contact: shivankg.goel@mail.utoronto.ca
# License: MIT
#### Workspace setup ####
library(tidyverse)
library(tidyr)
library(janitor)
library(lubridate)
library(readxl)
library(arrow)
library(dplyr)
library(stringr)
#### Clean data ####
# Reading dataset
df  <- read.csv("data/raw_data/STA305 Dataset.csv")
df_long <- df %>%
# 1) Pivot everything into a single 'score' column
pivot_longer(
cols = c(game_before, game_after, cards_before, cards_after),
names_to = c("measure", "time"),  # measure = "game"/"cards"; time = "before"/"after"
names_pattern = "(.*)_(.*)",      # split on underscore
values_to = "score"
) %>%
# 2) Pivot wider so that 'game' and 'cards' each get their own column
pivot_wider(
names_from = measure,            # measure is "game" or "cards"
values_from = score
) %>%
# 3) Convert the time labels from "before"/"after" to capitalized or simpler factor labels
mutate(
time = case_when(
time == "before" ~ "Before",
time == "after"  ~ "After",
TRUE ~ time
)
) %>%
# 4) (Optional) rename columns for clarity
rename(
game_score  = game,
cards_score = cards
)
write.csv(df_long, "data/analysis_data/clean_data.csv", row.names = FALSE)
#### Preamble ####
# Purpose: Clean the cyberattack dataset for analysis on cyber breaches
# Author: Shivank Goel
# Date: 22 March 2024
# Contact: shivankg.goel@mail.utoronto.ca
# License: MIT
#### Workspace setup ####
library(tidyverse)
library(tidyr)
library(janitor)
library(lubridate)
library(readxl)
library(arrow)
library(dplyr)
library(stringr)
#### Clean data ####
# Reading dataset
df  <- read.csv("data/raw_data/STA305 Dataset.csv")
df_long <- df %>%
# Pivot everything into a single 'score' column
pivot_longer(
cols = c(game_before, game_after, cards_before, cards_after),
names_to = c("measure", "time"),  # measure = "game"/"cards"; time = "before"/"after"
names_pattern = "(.*)_(.*)",      # split on underscore
values_to = "score"
) %>%
# Pivot wider so that 'game' and 'cards' each get their own column
pivot_wider(
names_from = measure,            # measure is "game" or "cards"
values_from = score
) %>%
# 3) Convert the time labels from "before"/"after" to capitalized or simpler factor labels
mutate(
time = case_when(
time == "before" ~ "Before",
time == "after"  ~ "After",
TRUE ~ time
)
) %>%
rename(
game_score  = game,
cards_score = cards
)
write.csv(df_long, "data/analysis_data/clean_data.csv", row.names = FALSE)
#### Preamble ####
# Purpose: Clean the cyberattack dataset for analysis on cyber breaches
# Author: Shivank Goel
# Date: 22 March 2024
# Contact: shivankg.goel@mail.utoronto.ca
# License: MIT
#### Workspace setup ####
library(tidyverse)
library(tidyr)
library(janitor)
library(lubridate)
library(readxl)
library(arrow)
library(dplyr)
library(stringr)
#### Clean data ####
# Reading dataset
df  <- read.csv("data/raw_data/STA305 Dataset.csv")
df_long <- df %>%
# Pivot everything into a single 'score' column
pivot_longer(
cols = c(game_before, game_after, cards_before, cards_after),
names_to = c("measure", "time"),  # measure = "game"/"cards"; time = "before"/"after"
names_pattern = "(.*)_(.*)",      # split on underscore
values_to = "score"
) %>%
# Pivot wider so that 'game' and 'cards' each get their own column
pivot_wider(
names_from = measure,            # measure is "game" or "cards"
values_from = score
) %>%
#  Convert the time labels from "before"/"after" to capitalized or simpler factor labels
mutate(
time = case_when(
time == "before" ~ "Before",
time == "after"  ~ "After",
TRUE ~ time
)
) %>%
rename(
game_score  = game,
cards_score = cards
)
write.csv(df_long, "data/analysis_data/clean_data.csv", row.names = FALSE)
#| include: false
#| warning: false
#| message: false
library(tidyverse)
library(janitor)
library(here)
library(lubridate)
library(arrow)
library(dplyr)
library(knitr)
library(performance)
library(kableExtra)
library(performance)
library(ggpubr)
clean_data <- read.csv(here("data", "analysis_data", "clean_data.csv"))
#| label: tbl-summary-1
#| tbl-cap: "Summary Statistics for Quantitative Variables"
#| echo: false
#| warning: false
#| message: false
# References:
# https://tellingstorieswithdata.com/
# https://q.utoronto.ca/courses/376099/pages/project-descriptions?module_item_id=6379323
m1_game_before <- mean(clean_data$game_before, na.rm = TRUE)
m2_game_before <- median(clean_data$game_before, na.rm = TRUE)
m3_game_before <- sd(clean_data$game_before, na.rm = TRUE)
m4_game_before <- IQR(clean_data$game_before, na.rm = TRUE)
m1_game_after <- mean(clean_data$game_after, na.rm = TRUE)
m2_game_after <- median(clean_data$game_after, na.rm = TRUE)
m3_game_after <- sd(clean_data$game_after, na.rm = TRUE)
m4_game_after <- IQR(clean_data$game_after, na.rm = TRUE)
m1_cards_before <- mean(clean_data$cards_before, na.rm = TRUE)
m2_cards_before <- median(clean_data$cards_before, na.rm = TRUE)
m3_cards_before <- sd(clean_data$cards_before, na.rm = TRUE)
m4_cards_before <- IQR(clean_data$cards_before, na.rm = TRUE)
m1_cards_after <- mean(clean_data$cards_after, na.rm = TRUE)
m2_cards_after <- median(clean_data$cards_after, na.rm = TRUE)
m3_cards_after <- sd(clean_data$cards_after, na.rm = TRUE)
m4_cards_after <- IQR(clean_data$cards_after, na.rm = TRUE)
# Combine into a table
summary_table <- data.frame(
Statistic = c("Mean", "Median", "SD", "IQR"),
Game_Before = c(m1_game_before, m2_game_before, m3_game_before, m4_game_before),
Game_After = c(m1_game_after, m2_game_after, m3_game_after, m4_game_after),
Cards_Before = c(m1_cards_before, m2_cards_before, m3_cards_before, m4_cards_before),
Cards_After = c(m1_cards_after, m2_cards_after, m3_cards_after, m4_cards_after)
)
#### Preamble ####
# Purpose: Clean the cyberattack dataset for analysis on cyber breaches
# Author: Shivank Goel
# Date: 22 March 2024
# Contact: shivankg.goel@mail.utoronto.ca
# License: MIT
#### Workspace setup ####
library(tidyverse)
library(janitor)
library(lubridate)
library(readxl)
library(arrow)
library(dplyr)
library(stringr)
#### Clean data ####
# Reading dataset
df  <- read.csv("data/raw_data/STA305 Dataset.csv")
# Reshape data for repeated anova measure
clean_data_long <- df %>%
pivot_longer(
cols = c(game_before, game_after, cards_before, cards_after),
names_to = c(".value", "Time"),
names_sep = "_"
)
# Numeric value of time begore /after as 0/1 fr making plots
clean_data_long <- clean_data_long %>%
mutate(Time_numeric = factor(Time, levels = c("before", "after"), labels = c(0, 1)))
clean_data_long <- clean_data_long %>%
mutate(Time_numeric = as.numeric(as.character(Time_numeric)))
clean_data_long <- clean_data_long %>%
select(name, drug, dosage_level, Time, Time_numeric, game, cards, location, age, age_group)
clean_data_long <- clean_data_long %>%
rename(
Name = name,
Drug = drug,
DosageLevel = dosage_level,
Time = Time,
TimeNumeric = Time_numeric,
GameScore = game,
CardScore = cards,
Location = location,
Age = age,
AgeGroup = age_group
)
# Saving cleaned data
write.csv(clean_data_long, file = "data/analysis_data/clean_data.csv", row.names = FALSE)
#### Preamble ####
# Purpose: Clean the cyberattack dataset for analysis on cyber breaches
# Author: Shivank Goel
# Date: 22 March 2024
# Contact: shivankg.goel@mail.utoronto.ca
# License: MIT
#### Workspace setup ####
library(tidyverse)
library(janitor)
library(lubridate)
library(readxl)
library(arrow)
library(dplyr)
library(stringr)
#### Clean data ####
# Reading dataset
df  <- read.csv("data/raw_data/STA305 Dataset.csv")
# Reshape data for repeated anova measure
clean_data_long <- df %>%
pivot_longer(
cols = c(game_before, game_after, cards_before, cards_after),
names_to = c(".value", "Time"),
names_sep = "_"
)
# Numeric value of time begore /after as 0/1 fr making plots
clean_data_long <- clean_data_long %>%
mutate(Time_numeric = factor(Time, levels = c("before", "after"), labels = c(0, 1)))
clean_data_long <- clean_data_long %>%
mutate(Time_numeric = as.numeric(as.character(Time_numeric)))
clean_data_long <- clean_data_long %>%
select(name, drug, dosage_level, Time, Time_numeric, game, cards, location, age, age_group)
clean_data_long <- clean_data_long %>%
rename(
Name = name,
Drug = drug,
DosageLevel = dosage_level,
Time = Time,
TimeNumeric = Time_numeric,
GameScore = game,
CardScore = cards,
Location = location,
Age = age,
AgeGroup = age_group
)
# Saving cleaned data
write.csv(clean_data_long, file = "data/analysis_data/clean_data.csv", row.names = FALSE)
#| include: false
#| warning: false
#| message: false
library(tidyverse)
library(janitor)
library(here)
library(lubridate)
library(arrow)
library(dplyr)
library(knitr)
library(performance)
library(kableExtra)
library(performance)
library(ggpubr)
clean_data <- read.csv(here("data", "analysis_data", "clean_data.csv"))
#| include: false
#| warning: false
#| message: false
library(tidyverse)
library(janitor)
library(here)
library(lubridate)
library(arrow)
library(dplyr)
library(knitr)
library(performance)
library(kableExtra)
library(performance)
library(ggpubr)
clean_data <- read.csv(here("data", "analysis_data", "clean_data.csv"))
summary_table <- clean_data %>%
group_by(Time) %>%
summarise(
Game_Mean   = mean(GameScore, na.rm = TRUE),
Game_Median = median(GameScore, na.rm = TRUE),
Game_SD     = sd(GameScore, na.rm = TRUE),
Game_IQR    = IQR(GameScore, na.rm = TRUE),
Cards_Mean   = mean(CardScore, na.rm = TRUE),
Cards_Median = median(CardScore, na.rm = TRUE),
Cards_SD     = sd(CardScore, na.rm = TRUE),
Cards_IQR    = IQR(CardScore, na.rm = TRUE)
)
# Display the table nicely
kable(summary_table, format = "latex", booktabs = TRUE)
# Means by Time
tapply(clean_data$GameScore, clean_data$Time, mean)
# Standard deviations by Time
tapply(clean_data$GameScore, clean_data$Time, sd)
# Same for CardScore
tapply(clean_data$CardScore, clean_data$Time, mean)
tapply(clean_data$CardScore, clean_data$Time, sd)
library(knitr)
# Calculate Means and SDs by Time for GameScore
game_means <- tapply(clean_data$GameScore, clean_data$Time, mean, na.rm = TRUE)
game_sds   <- tapply(clean_data$GameScore, clean_data$Time, sd, na.rm = TRUE)
# Calculate Means and SDs by Time for CardScore
cards_means <- tapply(clean_data$CardScore, clean_data$Time, mean, na.rm = TRUE)
cards_sds   <- tapply(clean_data$CardScore, clean_data$Time, sd, na.rm = TRUE)
# Combine into a data frame for kable
summary_table <- data.frame(
Time = names(game_means),
Game_Mean = round(game_means, 2),
Game_SD   = round(game_sds, 2),
Cards_Mean = round(cards_means, 2),
Cards_SD   = round(cards_sds, 2)
)
# Display table
kable(summary_table, caption = "Summary Statistics by Time", booktabs = TRUE)
#| label: tbl-summary-1
#| tbl-cap: "Summary Statistics for Quantitative Variables"
#| echo: false
#| warning: false
#| message: false
library(knitr)
library(stringr)
# Calculate Means and SDs by Time for GameScore
game_means <- tapply(clean_data$GameScore, clean_data$Time, mean, na.rm = TRUE)
game_sds   <- tapply(clean_data$GameScore, clean_data$Time, sd, na.rm = TRUE)
# Calculate Means and SDs by Time for CardScore
cards_means <- tapply(clean_data$CardScore, clean_data$Time, mean, na.rm = TRUE)
cards_sds   <- tapply(clean_data$CardScore, clean_data$Time, sd, na.rm = TRUE)
# Combine into a data frame for kable
summary_table <- data.frame(
Time = names(game_means),
Game_Mean = round(game_means, 2),
Game_SD   = round(game_sds, 2),
Cards_Mean = round(cards_means, 2),
Cards_SD   = round(cards_sds, 2)
)
summary_table$Time <- str_to_title(summary_table$Time)
# Display table with no row names
kable(summary_table, caption = "Summary Statistics by Time", booktabs = TRUE, row.names = FALSE)
library(dplyr)
library(knitr)
# Step 1: Create a wide dataset with Before/After side by side for GameScore
game_wide <- clean_data %>%
select(Name, Drug, DosageLevel, Time, GameScore) %>%
pivot_wider(
names_from = Time,
values_from = GameScore
)
# Step 2: Compute improvement (After - Before)
game_wide <- game_wide %>%
mutate(improvement = after - before)
# Step 3: Summarise improvements by Drug
improvement_summary <- game_wide %>%
group_by(Drug) %>%
summarise(
Mean_Improvement = round(mean(improvement, na.rm = TRUE), 2),
SD_Improvement = round(sd(improvement, na.rm = TRUE), 2),
Median_Improvement = round(median(improvement, na.rm = TRUE), 2)
)
# Step 4: Display the table
kable(improvement_summary, caption = "Mean Improvement in Game Scores by Drug", booktabs = TRUE, row.names = FALSE)
#| label: tbl-summary-2
#| tbl-cap: "Summary of Drug Types"
#| echo: false
#| warning: false
#| message: false
library(knitr)
# Count and percentage for Drug
drug_counts <- table(clean_data$Drug)  # Use capital "D" if that's your column name
drug_percentages <- prop.table(drug_counts) * 100
# Combine into a data frame
drug_summary <- data.frame(
Drug = names(drug_counts),
Count = as.numeric(drug_counts),
Percentage = round(as.numeric(drug_percentages), 2)
)
# Display table
kable(drug_summary, caption = "Summary of Drug Types", booktabs = TRUE, row.names = FALSE)
#| label: tbl-summary-2
#| tbl-cap: "Summary of Drug Types"
#| echo: false
#| warning: false
#| message: false
# Count and percentage for Drug
drug_counts <- table(clean_data$drug)
drug_percentages <- prop.table(drug_counts) * 100
drug_summary <- data.frame(Drug = names(drug_counts), Count = as.numeric(drug_counts), Percentage = round(as.numeric(drug_percentages), 2))
colnames(drug_summary) <- c("Drug", "Count", "Percentage")
#| label: tbl-summary-3
#| tbl-cap: "Summary of Dosage Levels"
#| echo: false
#| warning: false
#| message: false
library(knitr)
# Count and percentage for Dosage Level
dosage_counts <- table(clean_data$DosageLevel)
dosage_percentages <- prop.table(dosage_counts) * 100
# Combine into a data frame
dosage_summary <- data.frame(
Dosage = names(dosage_counts),
Count = as.numeric(dosage_counts),
Percentage = round(as.numeric(dosage_percentages), 2)
)
# Display table
kable(dosage_summary, caption = "Summary of Dosage Levels", booktabs = TRUE, row.names = FALSE)
#| label: tbl-summary-5
#| tbl-cap: "Summary of Age Groups"
#| echo: false
#| warning: false
#| message: false
library(knitr)
# Count and percentage for Age Group
age_counts <- table(clean_data$AgeGroup)
age_percentages <- prop.table(age_counts) * 100
# Combine into a data frame
age_summary <- data.frame(
Age_Group = names(age_counts),
Count = as.numeric(age_counts),
Percentage = round(as.numeric(age_percentages), 2)
)
# Display table
kable(age_summary, caption = "Summary of Age Groups", booktabs = TRUE, row.names = FALSE)
