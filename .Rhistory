# Shapiro-Wilk Test for Normality of Residuals
# shapiro_test_part2 <- shapiro.test(residuals(model_part2))
# print(shapiro_test_part2)
library(ggpubr)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
#| echo: true
#| warning: false
#| message: false
#| fig.width: 6
#| fig.height: 4
#| fig-cap: "Residual Plot Model 1"
# QQ plot for Normality assumption
ggqqplot(residuals(model_1)) +
ggtitle("QQ Plot for Residuals Model 1")
# Shapiro-Wilk Tet
# shapiro_test <- shapiro.test(residuals(model_1))
# print(shapiro_test)
install.packages("ggpubr", dependencies = TRUE)
install.packages("ggpubr", dependencies = TRUE)
library(ggpubr)
exists("ggqqplot")
#| label: tbl-summary-4
#| tbl-cap: "Summary of Locations"
#| echo: false
#| warning: false
#| message: false
# Count and percentage for Location
location_counts <- table(clean_data$location)
location_percentages <- prop.table(location_counts) * 100
location_summary <- data.frame(Location = names(location_counts), Count = as.numeric(location_counts), Percentage = round(as.numeric(location_percentages), 2))
kable(location_summary, format = "latex", booktabs = TRUE)
#| include: false
#| warning: false
#| message: false
library(tidyverse)
library(janitor)
library(here)
library(lubridate)
library(arrow)
library(dplyr)
library(knitr)
library(performance)
library(kableExtra)
library(performance)
clean_data <- read.csv(here("data", "analysis_data", "clean_data.csv"))
#| label: tbl-summary-1
#| tbl-cap: "Summary Statistics for Quantitative Variables"
#| echo: false
#| warning: false
#| message: false
# References:
# https://tellingstorieswithdata.com/
# https://q.utoronto.ca/courses/376099/pages/project-descriptions?module_item_id=6379323
m1_game_before <- mean(clean_data$game_before, na.rm = TRUE)
m2_game_before <- median(clean_data$game_before, na.rm = TRUE)
m3_game_before <- sd(clean_data$game_before, na.rm = TRUE)
m4_game_before <- IQR(clean_data$game_before, na.rm = TRUE)
m1_game_after <- mean(clean_data$game_after, na.rm = TRUE)
m2_game_after <- median(clean_data$game_after, na.rm = TRUE)
m3_game_after <- sd(clean_data$game_after, na.rm = TRUE)
m4_game_after <- IQR(clean_data$game_after, na.rm = TRUE)
m1_cards_before <- mean(clean_data$cards_before, na.rm = TRUE)
m2_cards_before <- median(clean_data$cards_before, na.rm = TRUE)
m3_cards_before <- sd(clean_data$cards_before, na.rm = TRUE)
m4_cards_before <- IQR(clean_data$cards_before, na.rm = TRUE)
m1_cards_after <- mean(clean_data$cards_after, na.rm = TRUE)
m2_cards_after <- median(clean_data$cards_after, na.rm = TRUE)
m3_cards_after <- sd(clean_data$cards_after, na.rm = TRUE)
m4_cards_after <- IQR(clean_data$cards_after, na.rm = TRUE)
# Combine into a table
summary_table <- data.frame(
Statistic = c("Mean", "Median", "SD", "IQR"),
Game_Before = c(m1_game_before, m2_game_before, m3_game_before, m4_game_before),
Game_After = c(m1_game_after, m2_game_after, m3_game_after, m4_game_after),
Cards_Before = c(m1_cards_before, m2_cards_before, m3_cards_before, m4_cards_before),
Cards_After = c(m1_cards_after, m2_cards_after, m3_cards_after, m4_cards_after)
)
kable(summary_table, format = "latex", booktabs = TRUE)
#| label: tbl-summary-2
#| tbl-cap: "Summary of Drug Types"
#| echo: false
#| warning: false
#| message: false
# Count and percentage for Drug
drug_counts <- table(clean_data$drug)
drug_percentages <- prop.table(drug_counts) * 100
drug_summary <- data.frame(Drug = names(drug_counts), Count = as.numeric(drug_counts), Percentage = round(as.numeric(drug_percentages), 2))
colnames(drug_summary) <- c("Drug", "Count", "Percentage")
kable(drug_summary, format = "latex", booktabs = TRUE)
#| label: tbl-summary-3
#| tbl-cap: "Summary of Dosage Levels"
#| echo: false
#| warning: false
#| message: false
# Count and percentage for Dosage Level
dosage_counts <- table(clean_data$dosage_level)
dosage_percentages <- prop.table(dosage_counts) * 100
dosage_summary <- data.frame(Dosage = names(dosage_counts), Count = as.numeric(dosage_counts), Percentage = round(as.numeric(dosage_percentages), 2))
kable(dosage_summary, format = "latex", booktabs = TRUE)
#| label: tbl-summary-4
#| tbl-cap: "Summary of Locations"
#| echo: false
#| warning: false
#| message: false
# Count and percentage for Location
location_counts <- table(clean_data$location)
location_percentages <- prop.table(location_counts) * 100
location_summary <- data.frame(Location = names(location_counts), Count = as.numeric(location_counts), Percentage = round(as.numeric(location_percentages), 2))
kable(location_summary, format = "latex", booktabs = TRUE)
#| label: tbl-summary-4
#| tbl-cap: "Summary of Locations"
#| echo: false
#| warning: false
#| message: false
# Count and percentage for Location
location_counts <- table(clean_data$location)
location_percentages <- prop.table(location_counts) * 100
location_summary <- data.frame(Location = names(location_counts), Count = as.numeric(location_counts), Percentage = round(as.numeric(location_percentages), 2))
kable(location_summary, format = "latex", booktabs = TRUE)
#| label: tbl-summary-4
#| tbl-cap: "Summary of Locations"
#| echo: false
#| warning: false
#| message: false
# Count and percentage for Location
location_counts <- table(clean_data$location)
location_percentages <- prop.table(location_counts) * 100
location_summary <- data.frame(Location = names(location_counts), Count = as.numeric(location_counts), Percentage = round(as.numeric(location_percentages), 2))
kable(location_summary, format = "latex", booktabs = TRUE)
#| label: tbl-summary-4
#| tbl-cap: "Summary of Locations"
#| echo: false
#| warning: false
#| message: false
# Count and percentage for Location
location_counts <- table(clean_data$location)
location_percentages <- prop.table(location_counts) * 100
location_summary <- data.frame(Location = names(location_counts), Count = as.numeric(location_counts), Percentage = round(as.numeric(location_percentages), 2))
kable(location_summary, format = "latex", booktabs = TRUE)
#| label: tbl-summary-5
#| tbl-cap: "Summary of Age Groups"
#| echo: false
#| warning: false
#| message: false
# Count and percentage for Age Group
age_counts <- table(clean_data$age_group)
age_percentages <- prop.table(age_counts) * 100
age_summary <- data.frame(Age_Group = names(age_counts), Count = as.numeric(age_counts), Percentage = round(as.numeric(age_percentages), 2))
kable(age_summary, format = "latex", booktabs = TRUE)
#| label: tbl-summary-3
#| tbl-cap: "Summary of Dosage Levels"
#| echo: false
#| warning: false
#| message: false
# Count and percentage for Dosage Level
dosage_counts <- table(clean_data$dosage_level)
dosage_percentages <- prop.table(dosage_counts) * 100
dosage_summary <- data.frame(Dosage = names(dosage_counts), Count = as.numeric(dosage_counts), Percentage = round(as.numeric(dosage_percentages), 2))
kable(dosage_summary, format = "latex", booktabs = TRUE)
#| include: false
#| warning: false
#| message: false
# install.packages(c("tidyverse", "janitor", "here", "lubridate", "arrow", "dplyr",
#   "knitr", "performance", "kableExtra", #"ggpubr"))
#| include: false
#| warning: false
#| message: false
library(tidyverse)
library(janitor)
library(here)
library(lubridate)
library(arrow)
library(dplyr)
library(knitr)
library(performance)
library(kableExtra)
library(performance)
library(ggpubr)
clean_data <- read.csv(here("data", "analysis_data", "clean_data.csv"))
#| label: tbl-summary-1
#| tbl-cap: "Summary Statistics for Quantitative Variables"
#| echo: false
#| warning: false
#| message: false
# References:
# https://tellingstorieswithdata.com/
# https://q.utoronto.ca/courses/376099/pages/project-descriptions?module_item_id=6379323
m1_game_before <- mean(clean_data$game_before, na.rm = TRUE)
m2_game_before <- median(clean_data$game_before, na.rm = TRUE)
m3_game_before <- sd(clean_data$game_before, na.rm = TRUE)
m4_game_before <- IQR(clean_data$game_before, na.rm = TRUE)
m1_game_after <- mean(clean_data$game_after, na.rm = TRUE)
m2_game_after <- median(clean_data$game_after, na.rm = TRUE)
m3_game_after <- sd(clean_data$game_after, na.rm = TRUE)
m4_game_after <- IQR(clean_data$game_after, na.rm = TRUE)
m1_cards_before <- mean(clean_data$cards_before, na.rm = TRUE)
m2_cards_before <- median(clean_data$cards_before, na.rm = TRUE)
m3_cards_before <- sd(clean_data$cards_before, na.rm = TRUE)
m4_cards_before <- IQR(clean_data$cards_before, na.rm = TRUE)
m1_cards_after <- mean(clean_data$cards_after, na.rm = TRUE)
m2_cards_after <- median(clean_data$cards_after, na.rm = TRUE)
m3_cards_after <- sd(clean_data$cards_after, na.rm = TRUE)
m4_cards_after <- IQR(clean_data$cards_after, na.rm = TRUE)
# Combine into a table
summary_table <- data.frame(
Statistic = c("Mean", "Median", "SD", "IQR"),
Game_Before = c(m1_game_before, m2_game_before, m3_game_before, m4_game_before),
Game_After = c(m1_game_after, m2_game_after, m3_game_after, m4_game_after),
Cards_Before = c(m1_cards_before, m2_cards_before, m3_cards_before, m4_cards_before),
Cards_After = c(m1_cards_after, m2_cards_after, m3_cards_after, m4_cards_after)
)
kable(summary_table, format = "latex", booktabs = TRUE)
#| label: tbl-summary-2
#| tbl-cap: "Summary of Drug Types"
#| echo: false
#| warning: false
#| message: false
# Count and percentage for Drug
drug_counts <- table(clean_data$drug)
drug_percentages <- prop.table(drug_counts) * 100
drug_summary <- data.frame(Drug = names(drug_counts), Count = as.numeric(drug_counts), Percentage = round(as.numeric(drug_percentages), 2))
colnames(drug_summary) <- c("Drug", "Count", "Percentage")
kable(drug_summary, format = "latex", booktabs = TRUE)
#| label: tbl-summary-3
#| tbl-cap: "Summary of Dosage Levels"
#| echo: false
#| warning: false
#| message: false
# Count and percentage for Dosage Level
dosage_counts <- table(clean_data$dosage_level)
dosage_percentages <- prop.table(dosage_counts) * 100
dosage_summary <- data.frame(Dosage = names(dosage_counts), Count = as.numeric(dosage_counts), Percentage = round(as.numeric(dosage_percentages), 2))
kable(dosage_summary, format = "latex", booktabs = TRUE)
#| label: tbl-summary-5
#| tbl-cap: "Summary of Age Groups"
#| echo: false
#| warning: false
#| message: false
# Count and percentage for Age Group
age_counts <- table(clean_data$age_group)
age_percentages <- prop.table(age_counts) * 100
age_summary <- data.frame(Age_Group = names(age_counts), Count = as.numeric(age_counts), Percentage = round(as.numeric(age_percentages), 2))
kable(age_summary, format = "latex", booktabs = TRUE)
#| echo: false
#| warning: false
#| message: false
clean_data$improvement <- clean_data$game_after - clean_data$game_before
improvement_summary <- clean_data %>%
group_by(drug) %>%
summarise(
Mean_Improvement = mean(improvement, na.rm = TRUE),
SD_Improvement = sd(improvement, na.rm = TRUE),
Median_Improvement = median(improvement, na.rm = TRUE)
)
kable(improvement_summary, format = "latex", booktabs = TRUE, caption = "Mean Improvement in Game Scores by Drug")
#| label: fig-boxplot-scores
#| echo: false
#| warning: false
#| message: false
#| fig.width: 9
#| fig.height: 8
#| dpi: 300
#| fig-cap: "Boxplot of Memory Game Scores Before and After Treatment by Drug Type"
library(ggplot2)
library(patchwork)
#References
#https://r-graph-gallery.com/package/patchwork.html
clean_data$drug <- factor(clean_data$drug, labels = c("Aspirin", "Paracetamol", "Placebo", "Tramadol"))
# Create first boxplot
p1 <- ggplot(clean_data, aes(x = drug, y = game_before, fill = drug)) +
geom_boxplot() +
labs(title = "Memory Game Scores Before Treatment", x = "Drug Type", y = "Game Score", fill = "Drug") +
theme_minimal()
# Create second boxplot
p2 <- ggplot(clean_data, aes(x = drug, y = game_after, fill = drug)) +
geom_boxplot() +
labs(title = "Memory Game Scores After Treatment", x = "Drug Type", y = "Game Score", fill = "Drug") +
theme_minimal()
p1 / p2 + plot_annotation()
#| label: fig-boxplot-cards
#| echo: false
#| warning: false
#| message: false
#| fig.width: 9
#| fig.height: 8
#| dpi: 300
#| fig-cap: "Boxplot of Memory Card Scores Before and After by Drug"
library(ggplot2)
library(patchwork)
clean_data$drug <- factor(clean_data$drug, labels = c("Aspirin", "Paracetamol", "Placebo", "Tramadol"))
p1 <- ggplot(clean_data, aes(x = drug, y = cards_before, fill = drug)) +
geom_boxplot() +
labs(title = "Memory Card Scores Before Treatment", x = "Drug Type", y = "Memory Card Score", fill = "Drug") +
theme_minimal()
p2 <- ggplot(clean_data, aes(x = drug, y = cards_after, fill = drug)) +
geom_boxplot() +
labs(title = "Memory Card Scores After Treatment", x = "Drug Type", y = "Memory Card Score", fill = "Drug") +
theme_minimal()
p1 / p2 + plot_annotation()
#| echo: false
#| warning: false
#| message: false
#| fig.width: 7
#| fig.height: 4
#| dpi: 300
#| fig-cap: "Distribution of Dosage Levels"
ggplot(clean_data, aes(x = dosage_level, fill = dosage_level)) +
geom_bar() +
labs(title = "Distribution of Dosage Levels", x = "Dosage Level", y = "Count") +
theme_minimal()
#| include: false
#| warning: false
#| message: false
# Note from pdf
"In the performance package, it would alert you in red if any assumptions were heavily violated. If you noticed
any, it would be useful to mention them.
Unfortunately it is hard to create non-parametric versions. So if there is a violation for the sake of this
course it is fine to mention there is a violation but you will proceed as if everything was fine."
#| include: false
#| warning: false
#| message: false
# Barlett Test Homegenity of Variance: testing for ass
# bartlett_test <- bartlett.test(game_after ~ drug, data = clean_data)
# print(bartlett_test)
#| echo: false
#| warning: false
#| message: false
#| fig.width: 6
#| fig.height: 4
#| fig-cap: "Time Taken for Memory Game after taking Drugs"
# we fit One-Way ANOVA Model for our research question 1
model_1 <- aov(game_after ~ drug, data = clean_data)
# Check Model Assumptions
check_model(model_1, check = c("normality", "homogeneity"))
summary(model_1)
#| echo: false
#| warning: false
#| message: false
# bartlett_test_part1 <- bartlett.test(game_after ~ drug, data = clean_data)
# print(bartlett_test_part1)
#| echo: true
#| warning: false
#| message: false
#| fig.width: 6
#| fig.height: 4
#| fig-cap: "Residual Plot Model 1"
# QQ plot for Normality assumption
ggqqplot(residuals(model_1)) +
ggtitle("QQ Plot for Residuals Model 1")
# Shapiro-Wilk Tet
# shapiro_test <- shapiro.test(residuals(model_1))
# print(shapiro_test)
#| echo: false
#| warning: false
#| message: false
#| fig.width: 6
#| fig.height: 4
#| fig-cap: "Normality & Homegenity"
# Corrected Two-Way ANOVA Model for our reseearch question 2
model_2 <- aov(game_after ~ drug + dosage_level, data = clean_data)
# Check Model Assumptions
check_model(model_2, check = c("normality", "homogeneity"))
#| echo: false
#| warning: false
#| message: false
# Shapiro-Wilk Test for Normality of Residuals
# shapiro_test_part2 <- shapiro.test(residuals(model_part2))
# print(shapiro_test_part2)
#| echo: false
#| warning: false
#| message: false
#| fig.width: 6
#| fig.height: 4
#| fig-cap: "Residual Plot Model"
# QQ plot for residuals of Part 2
ggqqplot(residuals(model_2)) +
ggtitle("QQ Plot Two-Way ANOVA Model")
#| echo: false
#| warning: false
#| message: false
#| fig.width: 8  # Adjust width to fit both plots
#| fig.height: 4  # Reduce height for a smaller display
#| fig-cap: "QQ Plots for ANOVA Models"
# Load required libraries
library(ggpubr)  # For ggqqplot
library(patchwork)  # For arranging plots
# Create QQ plots
qq1 <- ggqqplot(residuals(model_1)) + ggtitle("QQ Plot for Residuals (One-Way ANOVA)")
qq2 <- ggqqplot(residuals(model_2)) + ggtitle("QQ Plot for Residuals (Two-Way ANOVA)")
# Arrange side by side
(qq1 + qq2) + plot_layout(ncol = 2)
#| echo: false
#| warning: false
#| message: false
#| fig.width: 6
#| fig.height: 4
#| fig-cap: "Time Taken for Memory Game after taking Drugs"
# Fit One-Way ANOVA Model
model_1 <- aov(game_after ~ drug, data = clean_data)
# Check Model Assumptions with improved scaling
check_model(model_1, check = c("normality", "homogeneity")) +
scale_y_continuous(labels = scales::comma, limits = c(-10, 10))  # Adjust limits based on your residual range
# Display model summary
summary(model_1)
#| echo: false
#| warning: false
#| message: false
#| fig.width: 6
#| fig.height: 4
#| fig-cap: "Time Taken for Memory Game after taking Drugs"
# we fit One-Way ANOVA Model for our research question 1
model_1 <- aov(game_after ~ drug, data = clean_data)
# Check Model Assumptions
check_model(model_1, check = c("normality", "homogeneity"))
summary(model_1)
#| echo: false
#| warning: false
#| message: false
#| fig.width: 6
#| fig.height: 4
#| fig-cap: "Time Taken for Memory Game after taking Drugs"
# Fit One-Way ANOVA Model
model_1 <- aov(game_after ~ drug, data = clean_data)
# Check Model Assumptions with adjusted scale
check_model(model_1, check = c("normality", "homogeneity")) +
scale_y_continuous(labels = scales::comma)  # Formats large numbers into readable format
#| label: fig-assump-after
#| echo: false
#| warning: false
#| message: false
#| fig.width: 9
#| fig.height: 8
#| dpi: 300
#| fig-cap: "Assumption Check for Time taken after taking the Drug"
# Fit ANOVA Model
model <- aov(game_after ~ drug, data = clean_data)
# Check Model Assumptions
check_model(model, check = c("normality", "homogeneity"))
#| include: false
#| warning: false
#| message: false
# Barlett Test Homegenity of Variance: testing for ass
# bartlett_test <- bartlett.test(game_after ~ drug, data = clean_data)
# print(bartlett_test)
#| label: fig-assump-before
#| echo: false
#| warning: false
#| message: false
#| fig.width: 9
#| fig.height: 8
#| dpi: 300
#| fig-cap: "Assumption Check for Time taken before taking the Drug"
# Fit ANOVA Model
model_b <- aov(game_before ~ drug, data = clean_data)
# Check Model Assumptions
check_model(model_b, check = c("normality", "homogeneity"))
#| echo: false
#| warning: false
#| message: false
#| fig.width: 6
#| fig.height: 4
#| fig-cap: "Normality & Homegenity (One-way ANOVA)"
# Corrected Two-Way ANOVA Model for our reseearch question 2
model_2 <- aov(game_after ~ drug + dosage_level, data = clean_data)
# Check Model Assumptions
check_model(model_2, check = c("normality", "homogeneity"))
#| echo: false
#| warning: false
#| message: false
#| fig.width: 6
#| fig.height: 4
#| fig-cap: "Homogeneity and Normality (Two-way ANOVA)"
# we fit One-Way ANOVA Model for our research question 1
model_1 <- aov(game_after ~ drug, data = clean_data)
# Check Model Assumptions
check_model(model_1, check = c("normality", "homogeneity"))
summary(model_1)
#| echo: false
#| warning: false
#| message: false
#| fig.width: 6
#| fig.height: 4
#| fig-cap: "Homogeneity and Normality (Two-way ANOVA)"
# we fit One-Way ANOVA Model for our research question 1
model_1 <- aov(game_after ~ drug, data = clean_data)
# Check Model Assumptions
check_model(model_1, check = c("normality", "homogeneity"))
summary(model_1)
#| label: fig-assump-one
#| echo: false
#| warning: false
#| message: false
#| fig.width: 6
#| fig.height: 4
#| fig-cap: "Homogeneity and Normality (One-way ANOVA)"
# we fit One-Way ANOVA Model for our research question 1
model_1 <- aov(game_after ~ drug, data = clean_data)
# Check Model Assumptions
check_model(model_1, check = c("normality", "homogeneity"))
summary(model_1)
#| label: fig-assump-one
#| echo: false
#| warning: false
#| message: false
#| fig.width: 6
#| fig.height: 4
#| fig-cap: "Homogeneity and Normality (One-way ANOVA)"
# we fit One-Way ANOVA Model for our research question 1
model_1 <- aov(game_after ~ drug, data = clean_data)
# Check Model Assumptions
check_model(model_1, check = c("normality", "homogeneity"))
