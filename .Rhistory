#### Preamble ####
# Purpose: Simulate a scenario for penguins dataset
# Author: Shivank Goel
# Date: 3rd March 2024
# Contact: shivankg.goel@mail.utoronto.ca
# License: MIT
# Pre-requisites:
# - Need to have installed the 'tidyverse' and 'dplyr' packages.
library(tidyverse)
library(dplyr)
library(palmerpenguins)
#### Simulate data ####
cleaned_penguins_data <- read_csv("outputs/data/cleaned_penguins_data.csv")
#### Simulate data ####
set.seed(123)  # Setting a seed for reproducibility
# Simulating based on cleaned data
# For example, let's simulate bill length and depth with added random noise
simulated_penguins_data <- cleaned_penguins_data %>%
mutate(
simulated_bill_length_mm = bill_length_mm + rnorm(n(), mean = 0, sd = 2),
simulated_bill_depth_mm = bill_depth_mm + rnorm(n(), mean = 0, sd = 1)
)
#### Simulate data ####
set.seed(123)  # Setting a seed for reproducibility
# Simulating based on cleaned data
# For example, let's simulate bill length and depth with added random noise
simulated_penguins_data <- cleaned_penguins_data %>%
mutate(
simulated_bill_length_mm = bill_length_mm + rnorm(n(), mean = 0, sd = 2),
simulated_bill_depth_mm = bill_depth_mm + rnorm(n(), mean = 0, sd = 1)
)
# Summary statistics for bill length for each species
summary_stats <- real_penguins_data %>%
group_by(species) %>%
summarise(
mean_bill_length = mean(bill_length_mm, na.rm = TRUE),
sd_bill_length = sd(bill_length_mm, na.rm = TRUE)
)
#### Preamble ####
# Purpose: Simulate a scenario for penguins dataset
# Author: Shivank Goel
# Date: 3rd March 2024
# Contact: shivankg.goel@mail.utoronto.ca
# License: MIT
# Pre-requisites:
# - Need to have installed the 'tidyverse' and 'dplyr' packages.
library(tidyverse)
library(dplyr)
library(palmerpenguins)
#### Simulate data ####
cleaned_penguins_data <- read_csv("outputs/data/cleaned_penguins_data.csv")
#### Simulate data ####
set.seed(123)  # Setting a seed for reproducibility
# Simulating based on cleaned data
# For example, let's simulate bill length and depth with added random noise
simulated_penguins_data <- cleaned_penguins_data %>%
mutate(
simulated_bill_length_mm = bill_length_mm + rnorm(n(), mean = 0, sd = 2),
simulated_bill_depth_mm = bill_depth_mm + rnorm(n(), mean = 0, sd = 1)
)
#### Simulate data ####
set.seed(123)  # Setting a seed for reproducibility
# Simulating based on cleaned data
# For example, let's simulate bill length and depth with added random noise
simulated_penguins_data <- cleaned_penguins_data %>%
mutate(
simulated_bill_length_mm = bill_length_mm + rnorm(n(), mean = 0, sd = 2),
simulated_bill_depth_mm = bill_depth_mm + rnorm(n(), mean = 0, sd = 1)
)
# Summary statistics for bill length for each species
summary_stats <- cleaned_penguins_data %>%
group_by(species) %>%
summarise(
mean_bill_length = mean(bill_length_mm, na.rm = TRUE),
sd_bill_length = sd(bill_length_mm, na.rm = TRUE)
)
# Simulating bill lengths for each species based on the summary statistics
simulate_bill_length <- function(species_name, n) {
species_stats <- filter(summary_stats, species == species_name)
rnorm(n, mean = species_stats$mean_bill_length, sd = species_stats$sd_bill_length)
}
# Number of simulations for each species
n_simulations <- 100
# Generating simulated data
simulated_penguins_data <- tibble(
species = rep(c("Adelie", "Chinstrap", "Gentoo"), each = n_simulations),
bill_length_mm = c(
simulate_bill_length("Adelie", n_simulations),
simulate_bill_length("Chinstrap", n_simulations),
simulate_bill_length("Gentoo", n_simulations)
)
)
write_csv(simulated_penguins_data, "outputs/data/simulated_penguins_data.csv")
#### Preamble ####
# Purpose: Simulate a scenario for penguins dataset
# Author: Shivank Goel
# Date: 3rd March 2024
# Contact: shivankg.goel@mail.utoronto.ca
# License: MIT
# Pre-requisites:
# - Need to have installed the 'tidyverse' and 'dplyr' packages.
library(tidyverse)
library(dplyr)
library(palmerpenguins)
#### Simulate data ####
cleaned_penguins_data <- read_csv("outputs/data/cleaned_penguins_data.csv")
#### Simulate data ####
set.seed(123)  # Setting a seed for reproducibility
# Simulating based on cleaned data
# For example, let's simulate bill length and depth with added random noise
simulated_penguins_data <- cleaned_penguins_data %>%
mutate(
simulated_bill_length_mm = bill_length_mm + rnorm(n(), mean = 0, sd = 2),
simulated_bill_depth_mm = bill_depth_mm + rnorm(n(), mean = 0, sd = 1)
)
# Simulate missing data in bill_length_mm variable
# For example, let's randomly set 10% of bill_length_mm data to NA (missing)
missing_indices <- sample(1:nrow(cleaned_penguins_data), 0.1 * nrow(cleaned_penguins_data))
cleaned_penguins_data$bill_length_mm[missing_indices] <- NA
# Summary statistics for bill length for each species
summary_stats <- cleaned_penguins_data %>%
group_by(species) %>%
summarise(
mean_bill_length = mean(bill_length_mm, na.rm = TRUE),
sd_bill_length = sd(bill_length_mm, na.rm = TRUE)
)
# Simulating bill lengths for each species based on the summary statistics
simulate_bill_length <- function(species_name, n) {
species_stats <- filter(summary_stats, species == species_name)
rnorm(n, mean = species_stats$mean_bill_length, sd = species_stats$sd_bill_length)
}
# Number of simulations for each species
n_simulations <- 100
# Generating simulated data
simulated_penguins_data <- tibble(
species = rep(c("Adelie", "Chinstrap", "Gentoo"), each = n_simulations),
bill_length_mm = c(
simulate_bill_length("Adelie", n_simulations),
simulate_bill_length("Chinstrap", n_simulations),
simulate_bill_length("Gentoo", n_simulations)
)
)
write_csv(simulated_penguins_data, "outputs/data/simulated_penguins_data.csv")
#| include: false
#| warning: false
#| message: false
library(tidyverse)
library(here)
library(kableExtra)
cleaned_data <- read_csv(here::here("outputs/data/cleaned_penguins_data.csv"))
#| label: tbl-cleaned-data
#| message: false
#| echo: false
#| warning: false
#| tbl-cap: "Sample of Cleaned Data"
head(cleaned_data, 6) %>%
kable(
booktabs = TRUE,
longtable = FALSE
) %>%
kable_styling(latex_options = c("striped", "scale_down"), font_size = 6)
#| label: fig-marks
#| fig-cap: "Original Distribution of Bill Length in Penguins"
#| echo: false
library(ggplot2)
library(dplyr)
# Plotting the original bill_length_mm distribution
ggplot(cleaned_penguins_data, aes(x = bill_length_mm)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal()
#| include: false
#| warning: false
#| message: false
library(tidyverse)
library(janitor)
library(here)
library(lubridate)
library(arrow)
library(dplyr)
library(knitr)
library(performance)
library(kableExtra)
library(performance)
library(ggpubr)
clean_data <- read.csv(here("data", "analysis_data", "clean_data.csv"))
#| label: tbl-summary-1
#| tbl-cap: "Summary Statistics for Quantitative Variables"
#| echo: false
#| warning: false
#| message: false
summary_table <- clean_data %>%
group_by(drug, dosage_level) %>%
summarise(
Game_Mean = round(mean(memory_game_score, na.rm = TRUE), 2),
Game_SD = round(sd(memory_game_score, na.rm = TRUE), 2),
Cards_Mean = round(mean(memory_cards_score, na.rm = TRUE), 2),
Cards_SD = round(sd(memory_cards_score, na.rm = TRUE), 2)
) %>%
arrange(drug, dosage_level)
#| label: tbl-summary-1
#| tbl-cap: "Summary Statistics for Quantitative Variables"
#| echo: false
#| warning: false
#| message: false
summary_table <- clean_data %>%
group_by(drug, dosage_level) %>%
summarise(
Game_Mean = round(mean(memory_game_score, na.rm = TRUE), 2),
Game_SD = round(sd(memory_game_score, na.rm = TRUE), 2),
Cards_Mean = round(mean(memory_cards_score, na.rm = TRUE), 2),
Cards_SD = round(sd(memory_cards_score, na.rm = TRUE), 2)
) %>%
arrange(drug, dosage_level)
#| label: tbl-summary-1
#| tbl-cap: "Summary Statistics for Quantitative Variables"
#| echo: false
#| warning: false
#| message: false
library(knitr)
library(stringr)
# Calculate Means and SDs by Time for GameScore
game_means <- tapply(clean_data$GameScore, clean_data$Time, mean, na.rm = TRUE)
#| include: false
#| warning: false
#| message: false
library(tidyverse)
library(janitor)
library(here)
library(lubridate)
library(arrow)
library(dplyr)
library(knitr)
library(performance)
library(kableExtra)
library(performance)
library(ggpubr)
clean_data <- read.csv(here("data", "analysis_data", "clean_data.csv"))
#| label: tbl-summary-1
#| tbl-cap: "Summary Statistics for Quantitative Variables"
#| echo: false
#| warning: false
#| message: false
library(knitr)
library(stringr)
# Calculate Means and SDs by Time for GameScore
game_means <- tapply(clean_data$GameScore, clean_data$Time, mean, na.rm = TRUE)
#| include: false
#| warning: false
#| message: false
library(tidyverse)
library(janitor)
library(here)
library(lubridate)
library(arrow)
library(dplyr)
library(knitr)
library(performance)
library(stringr)
library(kableExtra)
library(performance)
library(ggpubr)
clean_data <- read.csv(here("data", "analysis_data", "clean_data.csv"))
#| label: tbl-summary-1
#| tbl-cap: "Summary Statistics for Quantitative Variables"
#| echo: false
#| warning: false
#| message: false
summary_table <- clean_data %>%
group_by(drug, dosage_level) %>%
summarise(
Game_Mean = round(mean(memory_game_score, na.rm = TRUE), 2),
Game_SD = round(sd(memory_game_score, na.rm = TRUE), 2),
Cards_Mean = round(mean(memory_cards_score, na.rm = TRUE), 2),
Cards_SD = round(sd(memory_cards_score, na.rm = TRUE), 2)
) %>%
arrange(drug, dosage_level)
# Clean column names for display
summary_table$drug <- str_to_title(summary_table$drug)
summary_table$dosage_level <- str_to_title(summary_table$dosage_level)
# Display the table
kable(summary_table, booktabs = TRUE, row.names = FALSE)
#| label: tbl-summary-1
#| tbl-cap: "Summary Statistics for Quantitative Variables"
#| echo: false
#| warning: false
#| message: false
summary_table <- clean_data %>%
group_by(drug, dosage_level) %>%
summarise(
Game_Mean = round(mean(memory_game_score, na.rm = TRUE), 2),
Game_SD = round(sd(memory_game_score, na.rm = TRUE), 2),
Cards_Mean = round(mean(memory_cards_score, na.rm = TRUE), 2),
Cards_SD = round(sd(memory_cards_score, na.rm = TRUE), 2)
) %>%
arrange(drug, dosage_level)
# Clean column names for display
summary_table$drug <- str_to_title(summary_table$drug)
summary_table$dosage_level <- str_to_title(summary_table$dosage_level)
colnames(summary_table) <- c(
"Drug Type",
"Dosage Level",
"Mean Memory Game Score",
"SD Memory Game Score",
"Mean Memory Card Score",
"SD Memory Card Score"
)
# Display the table
kable(summary_table, booktabs = TRUE, row.names = FALSE)
#| label: tbl-summary-1
#| tbl-cap: "Summary Statistics for Quantitative Variables"
#| echo: false
#| warning: false
#| message: false
# Compute statistics for Memory Game Score
mean_game <- mean(clean_data$memory_game_score, na.rm = TRUE)
median_game <- median(clean_data$memory_game_score, na.rm = TRUE)
sd_game <- sd(clean_data$memory_game_score, na.rm = TRUE)
iqr_game <- IQR(clean_data$memory_game_score, na.rm = TRUE)
# Compute statistics for Memory Cards Score
mean_cards <- mean(clean_data$memory_cards_score, na.rm = TRUE)
median_cards <- median(clean_data$memory_cards_score, na.rm = TRUE)
sd_cards <- sd(clean_data$memory_cards_score, na.rm = TRUE)
iqr_cards <- IQR(clean_data$memory_cards_score, na.rm = TRUE)
# Combine into a summary table
summary_table <- data.frame(
Statistic = c("Mean", "Median", "SD", "IQR"),
`Memory Game Score` = c(mean_game, median_game, sd_game, iqr_game),
`Memory Cards Score` = c(mean_cards, median_cards, sd_cards, iqr_cards)
)
# Display the table
kable(summary_table, format = "latex", booktabs = TRUE)
#| label: tbl-summary-2
#| tbl-cap: "Summary of Drug Types"
#| echo: false
#| warning: false
#| message: false
l# Generate counts of each drug type
#| label: tbl-summary-2
#| tbl-cap: "Summary of Drug Types"
#| echo: false
#| warning: false
#| message: false
# Generate counts of each drug type
drug_counts <- table(clean_data$drug)
# Calculate percentages
drug_percentages <- prop.table(drug_counts) * 100
# Combine counts and percentages into a summary dataframe
drug_summary <- data.frame(
Drug = names(drug_counts),
Count = as.numeric(drug_counts),
Percentage = round(as.numeric(drug_percentages), 2)
)
# Display table
kable(drug_summary, format = "latex", booktabs = TRUE)
#| label: tbl-summary-3
#| tbl-cap: "Summary of Dosage Levels"
#| echo: false
#| warning: false
#| message: false
# Count the occurrences of each dosage level
dosage_counts <- table(clean_data$dosage_level)
# Calculate the percentage for each dosage level
dosage_percentages <- prop.table(dosage_counts) * 100
# Combine counts and percentages into a summary dataframe
dosage_summary <- data.frame(
Dosage = names(dosage_counts),
Count = as.numeric(dosage_counts),
Percentage = round(as.numeric(dosage_percentages), 2)
)
# Display table
kable(dosage_summary, booktabs = TRUE, row.names = FALSE)
#| label: tbl-summary-3
#| tbl-cap: "Summary of Dosage Levels"
#| echo: false
#| warning: false
#| message: false
dosage_counts <- table(clean_data$dosage_level)
# percentage for each dosage level
dosage_percentages <- prop.table(dosage_counts) * 100
# summary dataframe
dosage_summary <- data.frame(
Dosage = names(dosage_counts),
Count = as.numeric(dosage_counts),
Percentage = round(as.numeric(dosage_percentages), 2)
)
# Display table
kable(dosage_summary, booktabs = TRUE, row.names = FALSE)
#| label: tbl-summary-5
#| tbl-cap: "Summary of Age Groups"
#| echo: false
#| warning: false
#| message: false
age_counts <- table(clean_data$age_group)
# percentages for each age group
age_percentages <- prop.table(age_counts) * 100
# summary dataframe
age_summary <- data.frame(
Age_Group = names(age_counts),
Count = as.numeric(age_counts),
Percentage = round(as.numeric(age_percentages), 2)
)
# Display table
kable(age_summary, booktabs = TRUE, row.names = FALSE)
#| label: fig-boxplot-scores
#| echo: false
#| warning: false
#| message: false
#| fig.width: 9
#| fig.height: 8
#| dpi: 300
#| fig-cap: "Boxplot of Memory Game Scores Before and After Treatment by Drug Type"
clean_data$dosage_level <- factor(clean_data$dosage_level, levels = c("Low", "High"))
# Boxplot of Memory Game Scores by Drug, colored by Dosage Level
ggplot(clean_data, aes(x = drug, y = memory_game_score, fill = dosage_level)) +
geom_boxplot() +
labs(
title = "Memory Game Scores by Drug Type and Dosage Level",
x = "Drug Type",
y = "Memory Game Score",
fill = "Dosage Level"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
#| label: fig-boxplot-scores
#| echo: false
#| warning: false
#| message: false
#| fig.width: 9
#| fig.height: 8
#| dpi: 300
#| fig-cap: "Memory Game Scores by Drug Type and Dosage Level"
clean_data$dosage_level <- factor(clean_data$dosage_level, levels = c("Low", "High"))
# Boxplot of Memory Game Scores by Drug, colored by Dosage Level
ggplot(clean_data, aes(x = drug, y = memory_game_score, fill = dosage_level)) +
geom_boxplot() +
labs(
x = "Drug Type",
y = "Memory Game Score",
fill = "Dosage Level"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
#| label: fig-boxplot-card-scores
#| echo: false
#| warning: false
#| message: false
#| fig.width: 9
#| fig.height: 8
#| dpi: 300
#| fig-cap: "Memory Game Scores by Drug Type and Dosage Level"
ggplot(clean_data, aes(x = drug, y = memory_cards_score, fill = dosage_level)) +
geom_boxplot() +
labs(
x = "Drug Type",
y = "Memory Cards Score",
fill = "Dosage Level"
) +
theme_minimal()
#| label: tbl-summary-1
#| tbl-cap: "Summary Statistics for Quantitative Variables"
#| echo: false
#| warning: false
#| message: false
# Compute statistics for Memory Game Score
mean_game <- mean(clean_data$memory_game_score, na.rm = TRUE)
median_game <- median(clean_data$memory_game_score, na.rm = TRUE)
sd_game <- sd(clean_data$memory_game_score, na.rm = TRUE)
iqr_game <- IQR(clean_data$memory_game_score, na.rm = TRUE)
# Compute statistics for Memory Cards Score
mean_cards <- mean(clean_data$memory_cards_score, na.rm = TRUE)
median_cards <- median(clean_data$memory_cards_score, na.rm = TRUE)
sd_cards <- sd(clean_data$memory_cards_score, na.rm = TRUE)
iqr_cards <- IQR(clean_data$memory_cards_score, na.rm = TRUE)
# Combine into a summary table
summary_table <- data.frame(
Statistic = c("Mean", "Median", "SD", "IQR"),
`Memory Game Score` = c(mean_game, median_game, sd_game, iqr_game),
`Memory Cards Score` = c(mean_cards, median_cards, sd_cards, iqr_cards)
)
# Display table
library(knitr)
library(kableExtra)
kable(summary_table, format = "latex", booktabs = TRUE)
#| label: tbl-summary-1
#| tbl-cap: "Summary Statistics for Quantitative Variables"
#| echo: false
#| warning: false
#| message: false
# Compute statistics for Memory Game Score
mean_game <- mean(clean_data$memory_game_score, na.rm = TRUE)
median_game <- median(clean_data$memory_game_score, na.rm = TRUE)
sd_game <- sd(clean_data$memory_game_score, na.rm = TRUE)
iqr_game <- IQR(clean_data$memory_game_score, na.rm = TRUE)
# Compute statistics for Memory Cards Score
mean_cards <- mean(clean_data$memory_cards_score, na.rm = TRUE)
median_cards <- median(clean_data$memory_cards_score, na.rm = TRUE)
sd_cards <- sd(clean_data$memory_cards_score, na.rm = TRUE)
iqr_cards <- IQR(clean_data$memory_cards_score, na.rm = TRUE)
print(iqr_cards)
# Combine into a summary table
summary_table <- data.frame(
Statistic = c("Mean", "Median", "SD", "IQR"),
`Memory Game Score` = c(mean_game, median_game, sd_game, iqr_game),
`Memory Cards Score` = c(mean_cards, median_cards, sd_cards, iqr_cards)
)
kable(summary_table, format = "latex", booktabs = TRUE)
